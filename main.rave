/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/io> <std/pthread> <std/thread> <std/random> <std/vector>

int allDone;
int needDone;

std::vector<char*> words;
std::file dataset;
std::string buffer;

int minVal = 0;
int maxVal = 0;
int count = 0;

char[20] sFirst;
char[20] sSecond;
char[20] sAnswer;

int locker;
std::string genLine() {
    std::string line = std::string(words[std::randomInt(0, words.length-1)]);

    int first = std::randomInt(minVal, maxVal);
    int second = std::randomInt(minVal, maxVal);

    char* buffer;

    std::cstring::ltos(first, &sFirst);
    std::cstring::ltos(second, &sSecond);
    std::cstring::ltos(first + second, &sAnswer);

    line.appendC(&sFirst);
    line.appendC(" + ");
    line.appendC(&sSecond);
    line.appendC(" ### Response: ");
    line.appendC(&sAnswer);
    line.add('\n');
} => line;

int locker;
void* addLine(void* arg) {
    for(int i=0; i<count; i++) {
        std::string ln = genLine();
            std::thread::spinlock::lock(&locker);
                //std::fprint(dataset, ln);
            std::thread::spinlock::unlock(&locker);
        ~ln;
        std::thread::spinlock::lock(&locker);
            allDone += 1;
            if((allDone % 100) == 0) std::println("Done: ", (cast(float)allDone / cast(float)needDone) * 100f, "%");
        std::thread::spinlock::unlock(&locker);
    }
}

void main(int argc, char** argv) {
    if(argc < 6) {
        std::println("You need at least 5 arguments!");
        std::println("1 - filename (for example: dataset.txt);");
        std::println("2 - count of threads (for example: 2);");
        std::println("3 - count of numbers for one thread (for example: 1000);");
        std::println("4 - minimum value of numbers (for example: 0);");
        std::println("5 - maximum value of numbers (for example: 1000).");
        std::exit(1);
    }

    words = std::vector<char*>();
    words.add("### Instruction: Please, solve ");
    words.add("### Instruction: Write the answer for ");
    words.add("### Instruction: Solve ");

    buffer = "";

    int threads = std::string(argv[2]).toInt();
    count = std::string(argv[3]).toInt();
    minVal = std::string(argv[4]).toInt();
    maxVal = std::string(argv[5]).toInt();

    dataset = std::file(argv[1]);
    dataset.open("a");

    needDone = threads * count;

    if(threads == 1) {
        for(int i=0; i<count; i++) std::fprint(dataset, genLine());
    }
    else {
        std::vector<ulong*> vThreads = std::vector<ulong*>();
        for(int i=0; i<threads; i++) {
            vThreads.add(cast(ulong*)std::malloc(sizeof(ulong)));
            pthread::create(vThreads.data[i], cast(pthread::attribute*)null, addLine, null);
        }
    
        for(int i=0; i<threads; i++) {
            ulong* thread = vThreads.data[i];
            pthread::join(thread[0], cast(void**)null);
        }
    }
}