/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/io> <std/thread> <std/random> <std/vector>

std::vector<char*> words;
std::vector<std::string> buffer;
int count;
int minVal;
int maxVal;
std::file dataset;

int allDone;
int needDone;

char[20] randomOperators;

int plSl;
int processLine(void* arg) {
    std::string str = "";

    char[20] sFirst;
    char[20] sSecond;
    char[20] sAnswer;
    int opIndex;
    
    for(int i=0; i<count; i++) {
        str.appendC("### Instruction: Please, solve ");
        int first = std::randomInt(minVal, maxVal);
        int second = std::randomInt(minVal, maxVal);

        std::cstring::ltos(first, &sFirst);
        std::cstring::ltos(second, &sSecond);
        
        if(randomOperators[opIndex] == 0c) std::cstring::ltos(first + second, &sAnswer);
        else std::cstring::ltos(first - second, &sAnswer);

        str.appendC(&sFirst);

        if(randomOperators[opIndex] == 0c) str.appendC(" + ");
        else str.appendC(" - ");

        str.appendC(&sSecond);
        str.appendC(" ### Response: ");
        str.appendC(&sAnswer);
        str.appendC("\n");

        std::thread::spinlock::lock(&plSl);
            allDone += 1;
            if((allDone % 1000) == 0) std::println("Done: ", (cast(float)allDone / cast(float)needDone) * 100f, "%");
        std::thread::spinlock::unlock(&plSl);

        opIndex += 1;
        if(opIndex >= 20) opIndex = 0;
    }
    buffer.add(str);
}

void main(int argc, char** argv) {
    if(argc < 6) {
        std::println("You need at least 5 arguments!");
        std::println("1 - filename (for example: dataset.txt);");
        std::println("2 - count of threads (for example: 2);");
        std::println("3 - count of numbers for one thread (for example: 1000);");
        std::println("4 - minimum value of numbers (for example: 0);");
        std::println("5 - maximum value of numbers (for example: 1000).");
        std::exit(1);
    }

    words = std::vector<char*>();
    words.add("### Instruction: Please, solve ");
    words.add("### Instruction: Write the answer for ");
    words.add("### Instruction: Solve ");
    words.add("### Instruction: Please, write the answer of expression ");

    buffer = std::vector<std::string>();

    int threads = std::string(argv[2]).toInt();
    count = std::string(argv[3]).toInt();
    minVal = std::string(argv[4]).toInt();
    maxVal = std::string(argv[5]).toInt();
    needDone = threads * count;

    for(int i=0; i<20; i++) randomOperators[i] = cast(char)std::randomInt(0, 1);

    dataset = std::file(argv[1]);

    dataset.open("w");

    std::vector<std::thread> vThreads = std::vector<std::thread>();

    for(int i=0; i<threads; i++) {
        std::thread thr = std::thread();
        thr.run(processLine, null);
        vThreads.add(thr);
    }

    for(int i=0; i<vThreads.length; i++) vThreads[i].join();

    for(int i=0; i<buffer.length; i++) dataset.write(buffer[i].data, buffer[i].length);
    
    ~dataset;

    std::println("All done!");
}