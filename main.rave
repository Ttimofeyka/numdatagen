/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/io> <std/thread> <std/random> <std/vector> <std/json> <std/math>

std::vector<std::cstring> instructions;
int count;
int minVal;
int maxVal;
std::file dataset;

int allDone;
int needDone;

int printN;
int percentage;

char[50] randomOperators;

int plSl;
int writeSl;

std::string instruction;
std::string response;
std::string after;

int processLine(void* arg) {
    std::string str = std::string(count * 64);
    defer ~str;

    char[25] sFirst;
    char[25] sSecond;
    char[25] sAnswer;
    int opIndex;
    
    for(int i=0; i<count; i++) {
        str.append(instruction);
        str.appendC(instructions[std::randomInt(0, instructions.length - 1)]);
    
        int first = std::randomInt(minVal, maxVal);
        int second = std::randomInt(minVal, maxVal);

        std::cstring::ltos(first, &sFirst);
        std::cstring::ltos(second, &sSecond);
        
        if(randomOperators[opIndex] == 0c) std::cstring::ltos(first + second, &sAnswer);
        else if(randomOperators[opIndex] == 1c) std::cstring::ltos(first - second, &sAnswer);
        else if(randomOperators[opIndex] == 2c) std::cstring::ltos(first * second, &sAnswer);
        else {
            if(second == 0) {
                std::memcpy(&sAnswer, "Infinity", 9);
            }
            else std::cstring::dtos(std::math::round(cast(double)first / cast(double)second, 6), 6, &sAnswer);
        }

        str.appendC(&sFirst);

        if(randomOperators[opIndex] == 0c) str.appendC(" + ", 3);
        else if(randomOperators[opIndex] == 1c) str.appendC(" - ", 3);
        else if(randomOperators[opIndex] == 2c) str.appendC(" * ", 3);
        else str.appendC(" / ", 3);

        str.appendC(&sSecond);
        str.append(response);
        str.appendC(&sAnswer);
        str.append(after);

        std::thread::spinlock::lock(&plSl);
            allDone += 1;
            if(allDone == printN) {allDone = 0; percentage += 1; std::println("Done: ", percentage, "%");}
        std::thread::spinlock::unlock(&plSl);

        opIndex += 1;
        if(opIndex >= 50) opIndex = 0;
    }

    std::thread::spinlock::lock(&writeSl);
    dataset.write(str.data, str.length);
    std::thread::spinlock::unlock(&writeSl);
}

void main(int argc, char** argv) {
    if(argc < 6) {
        std::println("You need at least 5 arguments!");
        std::println("1 - filename (for example: dataset.txt);");
        std::println("2 - count of threads (for example: 2);");
        std::println("3 - count of numbers for one thread (for example: 1000);");
        std::println("4 - minimum value of numbers (for example: 0);");
        std::println("5 - maximum value of numbers (for example: 1000).");
        std::exit(1);
    }

    instructions = std::vector<std::cstring>();
    defer ~instructions;

    // Read from instructions.json

    std::file fInstructions = std::file("instructions.json");
    defer ~fInstructions;

    fInstructions.open("r");
        std::string fInstructionsData = fInstructions.readAll();
        defer ~fInstructionsData;
    fInstructions.close();

    std::json::Value json = std::json::parse(fInstructionsData);
    defer ~json;

    std::json::Value format = json.get("format");

    instruction = format.get("instruction").as<std::string>();
    defer ~instruction;

    response = format.get("response").as<std::string>();
    defer ~response;

    after = format.get("after").as<std::string>();
    defer ~after;

    std::json::Value jobject = json.get("instructions");
    std::json::Value* jobjectptr = jobject.pointer();

    for(usize i=0; i<jobject.length; i++) instructions.add(jobjectptr[i].as<std::cstring>());

    int threads = std::string(argv[2]).toInt();
    count = std::string(argv[3]).toInt();
    minVal = std::string(argv[4]).toInt();
    maxVal = std::string(argv[5]).toInt();
    needDone = threads * count;
    printN = needDone / 100;

    for(int i=0; i<50; i++) randomOperators[i] = cast(char)std::randomInt(0, 3);

    dataset = std::file(argv[1]);
    defer ~dataset;

    dataset.open("w");
        std::vector<std::thread> vThreads = std::vector<std::thread>();

        for(int i=0; i<threads; i++) {
            std::thread thr = std::thread();
            thr.run(processLine, null);
            vThreads.add(thr);
        }

        for(int i=0; i<vThreads.length; i++) vThreads[i].join();
    dataset.close();

    std::println("All done!");
}