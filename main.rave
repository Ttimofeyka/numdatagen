/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/io> <std/pthread> <std/thread> <std/random> <std/vector>

int allDone;
int needDone;

std::vector<char*> words;
std::file dataset;
std::string buffer;

int minVal;
int maxVal;
int count;

char[20] sFirst;
char[20] sSecond;
char[20] sAnswer;

int locker;
void* addLine(void* arg) {
    std::string lines = "";
    for(int i=0; i<count; i++) {
        lines.appendC(words[std::randomInt(0, words.length-1)]);
        short op = std::randomShort(0, 1); // TODO: divide (because using ltos, not dtos)
        int first = std::randomInt(minVal, maxVal);
        int second = std::randomInt(minVal, maxVal);

        std::cstring::ltos(first, &sFirst);
        std::cstring::ltos(second, &sSecond);

        if(op == 0) std::cstring::ltos(first + second, &sAnswer);
        else std::cstring::ltos(first - second, &sAnswer);

        lines.appendC(&sFirst);
        
        if(op == 0) lines.appendC(" + ");
        else lines.appendC(" - ");

        lines.appendC(&sSecond);
        lines.appendC(" ### Response: ");
        lines.appendC(&sAnswer);
        lines.add('\n');
        
        std::thread::spinlock::lock(&locker);
            allDone += 1;
            if((allDone % 100) == 0) std::println("Done: ", (cast(float)allDone / cast(float)needDone) * 100f, "%");
        std::thread::spinlock::unlock(&locker);
    }
    std::thread::spinlock::lock(&locker);
        buffer.append(lines);
    std::thread::spinlock::unlock(&locker);
}

void main(int argc, char** argv) {
    if(argc < 6) {
        std::println("You need at least 5 arguments!");
        std::println("1 - filename (for example: dataset.txt);");
        std::println("2 - count of threads (for example: 2);");
        std::println("3 - count of numbers for one thread (for example: 1000);");
        std::println("4 - minimum value of numbers (for example: 0);");
        std::println("5 - maximum value of numbers (for example: 1000).");
        std::exit(1);
    }

    words = std::vector<char*>();
    words.add("### Instruction: Please, solve ");
    words.add("### Instruction: Write the answer for ");
    words.add("### Instruction: Solve ");
    words.add("### Instruction: Please, write the answer of expression ");

    buffer = "";

    int threads = std::string(argv[2]).toInt();
    count = std::string(argv[3]).toInt();
    minVal = std::string(argv[4]).toInt();
    maxVal = std::string(argv[5]).toInt();

    dataset = std::file(argv[1]);
    dataset.open("a");

    needDone = threads * count;
    std::vector<ulong*> vThreads = std::vector<ulong*>();
    for(int i=0; i<threads; i++) {
        vThreads.add(cast(ulong*)std::malloc(sizeof(ulong)));
        pthread::create(vThreads.data[i], cast(pthread::attribute*)null, addLine, null);
    }

    for(int i=0; i<threads; i++) {
        ulong* thread = vThreads.data[i];
        pthread::join(thread[i], cast(void**)null);
    }

    std::println("Generating is done! Writing to file '", dataset.name, "'...");
    std::fprint(dataset, buffer);
    std::println("All done!");
}